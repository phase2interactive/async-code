Test User System Implementation
===============================

Project Overview
----------------
Implement a comprehensive test user system for the Async Code platform to enable automated testing, improve development workflow, and ensure application stability. This system will create isolated test environments using local Git repositories, automated user provisioning, and proper cleanup mechanisms.

Background
----------
The current application lacks a proper test user system, making it difficult to run automated tests and validate functionality without affecting production data. Manual testing with real GitHub tokens leads to rate limiting issues and security concerns. A robust test user system is critical for maintaining code quality and enabling continuous integration.

Key Requirements
----------------

1. Local Git Repository System
   - Create test repositories in /tmp/test-repos/
   - Support file:// URLs instead of https://github.com/
   - Full control over test data without external dependencies
   - Implement repository initialization and seeding

2. Test User Management
   - Automated test user creation via Supabase service role
   - Fixed test user specifications (test@asynccode.test)
   - Consistent user IDs for predictable testing
   - Row-level security ensuring data isolation
   - Automatic cleanup after 1 hour

3. Seed Scripts and Fixtures
   - Idempotent seed scripts for test data
   - Sample projects and tasks
   - Pre-configured Git repositories
   - Reproducible test scenarios

4. Docker Compose Test Profile
   - Separate docker-compose.test.yml configuration
   - Isolated test database
   - Test-specific environment variables
   - Quick setup and teardown

5. Playwright Integration
   - Update test configuration for local repos
   - JWT authentication testing
   - E2E test scenarios
   - Parallel test execution support

6. CI/CD Updates
   - GitHub Actions workflow for automated testing
   - Pre-commit hooks for test validation
   - Automated cleanup on test failure
   - Test result reporting

Technical Specifications
------------------------

Authentication:
- Use Supabase service role key for user creation
- Generate valid JWT tokens for test users
- Implement token refresh for long-running tests

Data Management:
- Test data stored in .env.test (gitignored)
- Time-limited test data with TTL
- Automatic cleanup service
- Seed data versioning

Security:
- Complete isolation from production
- No real GitHub tokens in tests
- Test-specific credentials
- Validation of test mode

Performance Targets:
- Test setup time < 30 seconds
- Zero manual steps required
- 100% cleanup success rate
- No external dependency failures

Implementation Phases
---------------------

Phase 1: Test User Creation Service
- API endpoint for test user provisioning
- Supabase integration for user management
- JWT token generation for test users
- User cleanup scheduler

Phase 2: Local Git Repository System
- Git repository factory service
- File system management
- Repository templates
- URL generation and routing

Phase 3: Seed Scripts and Fixtures
- Python seed script framework
- Test data generators
- Repository content templates
- Idempotent execution

Phase 4: Playwright Integration
- Test configuration updates
- Helper functions for authentication
- Page object models
- Test data factories

Phase 5: CI/CD Updates
- GitHub Actions workflow
- Docker compose test profile
- Environment setup scripts
- Failure recovery mechanisms

Success Criteria
----------------
- All existing tests pass with new system
- New developer onboarding < 5 minutes
- Zero flaky tests due to external dependencies
- Complete test isolation
- Automated cleanup with 100% success rate